// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/nox.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoxServiceClient is the client API for NoxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoxServiceClient interface {
	QueryProcessHistory(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ProcessHistoryResponse, error)
	FailedLogins(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*LoginHistoryResponse, error)
	SearchEvents(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	GetProcessAncestry(ctx context.Context, in *PIDRequest, opts ...grpc.CallOption) (*ProcessHistoryResponse, error)
	GetTopEvents(ctx context.Context, in *TopNRequest, opts ...grpc.CallOption) (*TopNResponse, error)
}

type noxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoxServiceClient(cc grpc.ClientConnInterface) NoxServiceClient {
	return &noxServiceClient{cc}
}

func (c *noxServiceClient) QueryProcessHistory(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ProcessHistoryResponse, error) {
	out := new(ProcessHistoryResponse)
	err := c.cc.Invoke(ctx, "/nox.NoxService/QueryProcessHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noxServiceClient) FailedLogins(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (*LoginHistoryResponse, error) {
	out := new(LoginHistoryResponse)
	err := c.cc.Invoke(ctx, "/nox.NoxService/FailedLogins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noxServiceClient) SearchEvents(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/nox.NoxService/SearchEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noxServiceClient) GetProcessAncestry(ctx context.Context, in *PIDRequest, opts ...grpc.CallOption) (*ProcessHistoryResponse, error) {
	out := new(ProcessHistoryResponse)
	err := c.cc.Invoke(ctx, "/nox.NoxService/GetProcessAncestry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noxServiceClient) GetTopEvents(ctx context.Context, in *TopNRequest, opts ...grpc.CallOption) (*TopNResponse, error) {
	out := new(TopNResponse)
	err := c.cc.Invoke(ctx, "/nox.NoxService/GetTopEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoxServiceServer is the server API for NoxService service.
// All implementations must embed UnimplementedNoxServiceServer
// for forward compatibility
type NoxServiceServer interface {
	QueryProcessHistory(context.Context, *QueryRequest) (*ProcessHistoryResponse, error)
	FailedLogins(context.Context, *IPRequest) (*LoginHistoryResponse, error)
	SearchEvents(context.Context, *SearchRequest) (*SearchResponse, error)
	GetProcessAncestry(context.Context, *PIDRequest) (*ProcessHistoryResponse, error)
	GetTopEvents(context.Context, *TopNRequest) (*TopNResponse, error)
	mustEmbedUnimplementedNoxServiceServer()
}

// UnimplementedNoxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoxServiceServer struct {
}

func (UnimplementedNoxServiceServer) QueryProcessHistory(context.Context, *QueryRequest) (*ProcessHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProcessHistory not implemented")
}
func (UnimplementedNoxServiceServer) FailedLogins(context.Context, *IPRequest) (*LoginHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailedLogins not implemented")
}
func (UnimplementedNoxServiceServer) SearchEvents(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}
func (UnimplementedNoxServiceServer) GetProcessAncestry(context.Context, *PIDRequest) (*ProcessHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessAncestry not implemented")
}
func (UnimplementedNoxServiceServer) GetTopEvents(context.Context, *TopNRequest) (*TopNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopEvents not implemented")
}
func (UnimplementedNoxServiceServer) mustEmbedUnimplementedNoxServiceServer() {}

// UnsafeNoxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoxServiceServer will
// result in compilation errors.
type UnsafeNoxServiceServer interface {
	mustEmbedUnimplementedNoxServiceServer()
}

func RegisterNoxServiceServer(s grpc.ServiceRegistrar, srv NoxServiceServer) {
	s.RegisterService(&NoxService_ServiceDesc, srv)
}

func _NoxService_QueryProcessHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoxServiceServer).QueryProcessHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nox.NoxService/QueryProcessHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoxServiceServer).QueryProcessHistory(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoxService_FailedLogins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoxServiceServer).FailedLogins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nox.NoxService/FailedLogins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoxServiceServer).FailedLogins(ctx, req.(*IPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoxService_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoxServiceServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nox.NoxService/SearchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoxServiceServer).SearchEvents(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoxService_GetProcessAncestry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoxServiceServer).GetProcessAncestry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nox.NoxService/GetProcessAncestry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoxServiceServer).GetProcessAncestry(ctx, req.(*PIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoxService_GetTopEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoxServiceServer).GetTopEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nox.NoxService/GetTopEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoxServiceServer).GetTopEvents(ctx, req.(*TopNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NoxService_ServiceDesc is the grpc.ServiceDesc for NoxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nox.NoxService",
	HandlerType: (*NoxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryProcessHistory",
			Handler:    _NoxService_QueryProcessHistory_Handler,
		},
		{
			MethodName: "FailedLogins",
			Handler:    _NoxService_FailedLogins_Handler,
		},
		{
			MethodName: "SearchEvents",
			Handler:    _NoxService_SearchEvents_Handler,
		},
		{
			MethodName: "GetProcessAncestry",
			Handler:    _NoxService_GetProcessAncestry_Handler,
		},
		{
			MethodName: "GetTopEvents",
			Handler:    _NoxService_GetTopEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nox.proto",
}
